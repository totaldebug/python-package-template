name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  code-quality:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
      - name: Install dependencies with Poetry
        run: poetry install
      {% if cookiecutter.use_isort == 'y' -%}
      - name: Check imports
        run: poetry run isort --diff
      {% endif %}
      {% if cookiecutter.use_black == 'y' -%}
      - name: Check Black formatting
        run: poetry run black --check
      {% endif %}
      {% if cookiecutter.use_flake8 == 'y' -%}
      - name: Check flake8 formatting
        run: poetry run flake8
      {% endif %}
      {% if cookiecutter.use_mypy == 'y' -%}
      - name: Check static type
        run: poetry run mypy
      {% endif %}
      {% if cookiecutter.use_pytest == 'y' -%}
      - name: Check tests pass
        run: poetry pytest
      {% endif %}

  build-n-publish:
    {%- if cookiecutter.use_pypi_deployment_with_actions == 'y' -%}
    name: Create release and publish üêç distribution üì¶ to PyPI
    {%- else -%}
    name: Create Release
    {% endif %}
    if: startsWith(github.ref, 'refs/tags/')
    needs: [code-quality]
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: {% raw %}${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}{% endraw %}

      {% if cookiecutter.use_pypi_deployment_with_actions == 'y' -%}
      # PyPi release steps
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: {% raw %}poetry-${{ hashFiles('**/poetry.lock') }}{% endraw %}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Build
        run: poetry build
      - name: Publish distribution üì¶ to PyPI
        run: {% raw %}poetry publish -u __token__ -p ${{ secrets.pypi_password }}{% endraw %}
      {% endif %}
